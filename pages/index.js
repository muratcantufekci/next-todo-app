import TodoItem from '@/components/TodoItem'
import Head from 'next/head'
import { useState } from 'react'

const DUMMY_DATA = [
  {
    id: 1,
    name: 'Kitap oku',
    isCompleted: false
  },
  {
    id: 2,
    name: 'React öğren',
    isCompleted: false
  },
  {
    id: 3,
    name: 'Next.js öğren',
    isCompleted: true
  }
]

export default function Home() {
  const [todos, setTodos] = useState(DUMMY_DATA)
  const [todoItem, setTodoItem] = useState({ id: '', name: '', isCompleted: false })
  const [isAllTabClicked, setIsAllTabClicked] = useState(true)
  const [isActiveTabClicked, setIsActiveTabClicked] = useState(false)
  const [isCompletedTabClicked, setIsCopletedTabClicked] = useState(false)
  const [itemCount, setItemCount] = useState(3)
  const completedTodos = todos.filter(todo => todo.isCompleted === true)
  const activeTodos = todos.filter(todo => todo.isCompleted === false)

  //creates new to do item on change
  const onChangeInput = (e) => {
    setTodoItem({ id: itemCount + 1, name: e.target.value, isCompleted: false })
  }

  //adds created item to the old array
  const onSubmitHandler = (e) => {
    e.preventDefault()
    setTodos([...todos, todoItem])
    setTodoItem({ id: '', name: '' })
    setItemCount(current => current + 1)
  }

  //sets as completed
  const checkboxClickHandler = (id) => {
    const currentTodoIndex = todos.findIndex((todo) => todo.id === id);
    const updatedTodo = { ...todos[currentTodoIndex], isCompleted: !todos[currentTodoIndex].isCompleted };
    const newTodos = [...todos];
    newTodos[currentTodoIndex] = updatedTodo;
    setTodos(newTodos);
  }

  //deletes the item
  const deleteTodoHandler = (id) => {
    const newTodos = todos.filter(todo => todo.id !== id)
    setTodos(newTodos)
  }

  //makes tabs active and passive
  const allTabClickHandler = () => {
    setIsAllTabClicked(true)
    setIsActiveTabClicked(false)
    setIsCopletedTabClicked(false)
  }

  const activeTabClickHandler = () => {
    setIsActiveTabClicked(true)
    setIsAllTabClicked(false)
    setIsCopletedTabClicked(false)
  }

  const completeTabClickHandler = () => {
    setIsCopletedTabClicked(true)
    setIsAllTabClicked(false)
    setIsActiveTabClicked(false)
  }

  //clears all completed items
  const clearCompletedHandler = () => {
    const newTodos = todos.filter(todo => todo.isCompleted !== true)
    setTodos(newTodos)
  }

  return (
    <>
      <Head>
        <title>To Do App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="todoapp">
        <header className="header">
          <h1>Todos</h1>
          <form onSubmit={onSubmitHandler}>
            <input className="new-todo" placeholder="What needs to be done?" onChange={onChangeInput} value={todoItem.name} />
          </form>
        </header>

        <section className="main">
          <input className="toggle-all" type="checkbox" />
          <label htmlFor="toggle-all">
            Mark all as complete
          </label>

          <ul className="todo-list">
            {/* conditioanal rendering of tabs */}
            {isAllTabClicked &&
              todos.map(item => (
                <TodoItem key={item.id} name={item.name} id={item.id} isCompleted={item.isCompleted} checkboxClickHandler={checkboxClickHandler} deleteTodoHandler={deleteTodoHandler}/>
              ))
            }
            {isActiveTabClicked &&
              activeTodos.map(item => (
                <TodoItem key={item.id} name={item.name} id={item.id} isCompleted={item.isCompleted} checkboxClickHandler={checkboxClickHandler} deleteTodoHandler={deleteTodoHandler} />
              ))
            }
            {isCompletedTabClicked &&
              completedTodos.map(item => (
                <TodoItem key={item.id} name={item.name} id={item.id} isCompleted={item.isCompleted} checkboxClickHandler={checkboxClickHandler} deleteTodoHandler={deleteTodoHandler}/>
              ))
            }
          </ul>
        </section>

        <footer className="footer">
          <span className="todo-count">
            <strong>{activeTodos.length} </strong>
            items left
          </span>

          <ul className="filters">
            <li>
              <a href="#javascript" className={isAllTabClicked ? "selected" : ''} onClick={allTabClickHandler}>All</a>
            </li>
            <li>
              <a href="#javascript" className={isActiveTabClicked ? "selected" : ''} onClick={activeTabClickHandler}>Active</a>
            </li>
            <li>
              <a href="#javascript" className={isCompletedTabClicked ? "selected" : ''} onClick={completeTabClickHandler}>Completed</a>
            </li>
          </ul>

          <button className="clear-completed" onClick={clearCompletedHandler}>Clear completed</button>
        </footer>
      </section>
    </>
  )
}
